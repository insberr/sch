
overide [defaultZero] {
    user classes contains period 0; // only if the user has a period zero
    schedule classes contains [arrival]; // if the schedule referencing this overide has a class of type arrival

    replace class [arrival] with { [period 0] 6:30 to 7:30 };
}

overide [cambridge] {
    /*
        Things passed to an overide by default

        user
        - classes
        - grade

        schedule - reference to the schedule in which this overide is in
    */

    // options, yk so you dont have to rewrite an overide a bunch of times just because of defferent schedules
    @options (times);

    /*
        Has and Contains
        - With a list of items
            has - All the items exist
            contains - At least one of the items exist
        
        - With one item
            They are the same lol
        
        Equals
        - Has only the item or items, nothing more, nothing less.
    */

    // only continue doing conditions if this is true
    // if period 11, 12, or 13 is in the users classses
    user classes contains periods 11, 12, 13;

    // imagine
    // user classes contains { period 3 with teacher [Rick Astley] }


    // @overide bassically an overide condition, but allows multiple overides to be in one labled overide.
    // @overide ?[label]
    @overide grade10;
    user grade 10;
    
    remove [period 1] & [period 2];
    insert { [period 11] times.[11].start to times.[11].end } last operation; // last operation; in this example, puts this in place of where [period 2] was
    insert { [period 12] times.[12].start to times.[12].end } after last operation;
    insert { [period 13] times.[13].start to times.[13].end } after last operation;

    @overide grade11;
    user grade 11;

    remove [2] & [3];
    insert { [11] times.[11].start to times.[11].end } last operation; // last operation; in this example, puts this in place of where [period 2] was
    insert { [12] times.[12].start to times.[12].end } after last operation;
    insert { [13] times.[13].start to times.[13].end } after last operation;
    force lunch [3];
}

schedule [normal] {
    @description 'Normal Schedule';

    @classes;
    //  class [calss type] <time> to <time>, {options};
    class [arrival]  7:10 to 7:30;
    class [period 0] 6:30 to 7:30; // figure out displaying zero hour only if user has zero hour and then also removing arrival
    class [period 1] 7:35 to 8:45;
    class [2]        8:50 to 9:55;
    class [3]       10:00 to 11:00;

    @lunches {
        from [period 3];
        passing 5 minutes;
    }
    lunch [1] 10:30 to 11:00;
    lunch [2] 11:00 to 11:30;
    lunch [3] 11:30 to 12:00;
    

    @overides
    overide $defaultZero;
    // pass in args
    overide $cambridge ([11] 11:00 to 11:30, [12] 11:00 to 11:30, [13] 11:00 to 11:30); // too lazy to do times correctly
}

teacher [Rick Astley] ABCD-1234-AB34;

event [singleday] {
    @date [November 2, 2022];
    @schedule advisory;
    @message 'Advisory Day';
}

event [multiday, messageonly] {
    @date [November 2, 2022] to [November 5, 2022];
    @message 'Yall Silly';
}

event [reoccuring] {
    @schedule lateStart;
    @message 'Late Start';
    @occurs;
    date [November 2, 2022];
    date [november 9, 2022];
}

event [eventrange] {
    @info 'Assemblies';
    @date [November 3, 2022] to [November 5, 2022];
    @events [messageonly];
    day [1] 'Something Strange 1';
    day [2] 'Something Strange 2';
    day [3] 'Something Strange 3';
}

// Im tired, going to bed.
