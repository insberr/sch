/*
    Ideas Used:
    [] <- allows one "argument" to contain multiple things.
    {} <- contains statements (its a block!!)

    You could even think the entire file is inside a block, makes logic a bit easier.
    Statements "act" on the block they are in, adding/removing/replacing data, etc.
    You could even pass a block to a statement!!
    (i love blocks) -- Wackery

    Matchers are cool things that match statements/periods.
    A matcher with value [period 2] would match a class with type 'period' and number '2'
    - or just [2] lmafo.
    Maybe complex matcherxs like [period 2, teacher [Rick Astley]] or some sh
*/
// Define map locations
// location [x] [y] <name>;
location [10.4] [20] 'Greenhouse';
location [10] [20] 'test';
// define all 3 terms
terms {
    term 1 [September 6, 2022] [December 6, 2022];
    term 2 [December 8, 2022] [March 27, 2023];
    term 3 [March 28, 2023] [June 23, 2023];
};

// This can be overridden in events/schedules.
//   any command that needs it searches up the "block tree" for the nearest one.
lunches {
    {
        // If we arnt in term 1, we cancel processing
        only term 1;
        // teacher <name> <id> <lunch>
        teacher [Rick Astley] ABCD-1234-AB34 1;
    }
    {
        // If we arnt in term 2, we cancel processing.
        only term 2;
        // teacher <name> <id> <lunch>
        teacher [Rick Astley] ABCD-1234-AB34 2;
    }
    {
        // If we arnt in term 3, we cancel processing.
        only term 3;
        // teacher <name> <id> <lunch>
        teacher [Rick Astley] ABCD-1234-AB34 3;
    }
};

// sets a value in context, its a variable
set testValue test;
// oh god variable manipulation statements...
set sentryDSN blah;
// sets config.[key] = value
config sentry $sentryDSN;
// Functions
function defaultZero {
    // only if the user has a period zero
    user classes contains [period 0];
    // if the schedule referencing this overide has a class of type arrival
    self classes contains [arrival];
    // replace class <matcher> with <block>
    // basically find the class that matches the matcher (type or period or both) and replace it with the statements in the block
    // replaces arrival with the statements in the block (allows multiple statements)
    replace class [arrival] with {
        class [period 0] [6:30 to 7:30];
    };

};

// its like a function!
function cambridge [eleven twelve thirteen] {
    /*
        Things passed to an overide by default

        user
        - classes
        - grade

        schedule - reference to the schedule in which this overide is in

        Has and Contains
        - With a list of items
        has - All the items exist
        contains - At least one of the items exist

        - With one item
        They are the same lol

        Equals
        - Has only the item or items, nothing more, nothing less.
    */
    // only continue doing conditions if this is true
    // if period 11, 12, or 13 is in the users classses
    // maybe be able to specifiy and/or? (also matchers!)
    user classes contains [11] [12] [13];
    // imagine something like
    // user classes contains { period 3 with teacher [Rick Astley] }
    // blocks not passed into a statement are "absorbed" into their parent if all contitions match, like an if statement
    {
        only grade 10; // the only command searches for an item in the context, and compares it, IE passing variables from JS
        // these are matchers, remove can take many arguments
        remove [period 1] [period 2];
        // with the power of blocks!
        // insert <block> <location>
        // last operation; in this example, puts this in place of where [period 2] was
        insert {
            class [period 11] [$eleven];
            class [period 12] [$twelve];
            class [period 13] [$thirteen];
        } last operation;
    }
    {
        only grade 11;
        remove [2] [3];
        // last operation; in this example, puts this in place of where [period 2] was
        insert {
            class [11] [$eleven];
            class [12] [$twelve];
            class [13] [$thirteen];
        } last operation;
        force lunch 3;
    }
};

schedule normal {
    description 'Normal Schedule';
    //  class [calss type] [<time> to <time>], {options};
    class [zero] [6:35 to 7:30];
    class [period 1] [7:35 to 8:45];
    class [2] [8:50 to 9:55];
    class [3] [9:55 to 11:40];
    class [4] [11:45 to 12:55];
    class [5] [13:00 to 14:05];
    class [dismissal] [14:05 to 11:10];
    // how do we do this ...
    lunchConfig {
        from [period 3];
        passing [5 minutes];
    };

    lunch [1] [10:30 to 11:00];
    lunch [2] [11:00 to 11:30];
    lunch [3] [11:30 to 12:00];
    call defaultZero;
    // Pass in args
    call cambridge [11:00 to 11:30] [11:00 to 11:30] [11:00 to 11:30];
};

// Inherited schedule
schedule testInherit {
    inherit normal;
    description 'Test Inherit Schedule';
};

schedule advisory {
    inherit normal;
};

schedule lateStart {
    inherit normal;
};

// the things inside the [] can be infered
// maybe replace it with an id?
event {
    date [November 2, 2022];
    schedule advisory;
    message 'Advisory Day';
};

event {
    from [November 2, 2022] to [November 5, 2022];
    message 'Yall Silly';
};

event {
    schedule lateStart;
    message 'Late Start';
    date [November 2, 2022];
    date [november 9, 2022]; // multiple date arguments stack
};

event {
    info 'Assemblies';
    from [November 3, 2022] to [November 5, 2022];
    events {
        day [1] {
            message 'Something Strange 1'; // day specific overrides go here.
            // they should be merged into the event on that day.
            // you could even do weird stuff like changing the event range
            // although why would you do that?
        };

        day [2] {
            message 'Something Strange 2';
        };

        day [3] {
            message 'Something Strange 3';
        }; // blocks save the day again!

    };

};

event {
    info 'Assemblies';
    from [November 3, 2022] to [November 5, 2022];
    events {
        day [1] {
            message 'Something Strange 1'; // day specific overrides go here.
            // they should be merged into the event on that day.
            // you could even do weird stuff like changing the event range
            // although why would you do that?
        };

        day [2] to [3] {
            message 'Something Strange 2 and 3';
        };

    };

};

event {
    message 'override lunch';
    // any command below or at this block will use these lunches instead. (includes the schedule.)
    lunches {
        teacher [Rick Astley] ABCD-1234-AB34 69;
    };

    schedule normal;
};
