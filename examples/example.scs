// this is an inline comment or whatever
/* this is a multiline comment */

// Schedules
Schedule [Normal] {
    /* Idea ?
        #Passing [5min, nodisplay];
    */
    @Classes;
    Class [Advisory] {
        startTime: 7:30am; // 24 hour time is default unless am/pm is specified
        endTime:   8am; // 8:00am would work too
    }
    Class [Period, 1] {
        start: 7:30am;
        end:   8:00am;
    }
    Class [2] { // Period can be ommited, its default. It is not recommended because of readability
        start: 7:30am;
        end:   8:00am;
    }
    Class [Period, 3] {
        start: 7:30am;
        end:   8:00am;
    }
    Class [Period, 4] {
        start: 7:30am;
        end:   8:00am;
    }
    Class [Period, 5] {
        start: 7:30am;
        end:   8:00am;
    }
    Class [Dismissal] {
        start: 7:30am;
        end:   8:00am;
    }

    @Lunches;
    Lunch [1] {
        basedOnPeriod: 3;
        startTime: 10:30am;
        endTime: 11:00am;
        passing: 5min;
    }
}

Schedule [LateStart1Hour] {
    // write code here
}

// This is just an idea, might be useless
Schedule [SomethingWeird] {
    // If for some reason the schedule needs to be reused from an existing one
    #use Normal;
    // white stuff that changes the values maybe
}

// events. you could put this in a seperat file aswell

// Message only event
Event [SingleDay, MessageOnly] {
    date: October 23, 2022;
    message: 'Test';
}

// Single day event
Event [SingleDay] {
    date: October 23, 2022;
    message: 'Test';
    schedule: EarlyDismissal;
}

// Group of events that use the same schedule, but different days have different messages
// write ...

// A event that reoccurrs
Event [Reocurring] {
    message: '1 Hour Late Start';
    schedule: LateStart1Hour;
    occurs: [
        November 10, 2022;
        December 15, 2022;
    ];
}

/* JS Output
    {
        Schedules: {
            Normal: {
                Classes: [
                    // the type is written in its ts enum form, in reality itll be a number
                    { type: Advisory, period: null, ... },
                    { type: Period, period: 1, ... },
                ]
            },
            ...
        },
        Events: [
            ...
        ]
    }
*/
